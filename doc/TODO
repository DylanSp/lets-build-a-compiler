Add additional, more comprehensive tests
-mix arithmetic, variable assignment, control flow, boolean

Rearrange order of functions into logical units

then start chapter 7.

-CompilerReader class, handles batch processing of a file - ONLY IF NECESSARY
-uses while(getline) to parse file into vector<string>, calls compile_full

-have a static enum(?) of response types in Compiler: "compilation ok", "syntax error", "type error", etc.
-test methods can check if response is right type
-compile_full() returns this type
-create test battery to check handling of input with bad syntax.
--create a custom Exception class deriving std::runtime_error, use google test's EXPECT_THROW

Potentially rename *_CHAR to *_SYMBOL; use a typedef to switch between char and string?

Re-examine using boost for some things like filesystem paths, just to gain familiarity


Change Compiler to take another ostream as error output.



Get cloud9 debugger working




Long-term (after finishing tutorial):
-reconstruct w/ flex/bison
--try with early grammar of chapter 6, see if they're able to parse the non-LL(k) grammar (see doc/nonfunctional_grammar)
-target JVM/LLVM instead of c++
-develop enhanced type-safety
-figure out interesting ideas for semantics to play with
-build a self-hosting compiler
-optimization
--see ideas referenced in http://joeduffyblog.com/2015/12/19/safe-native-code/